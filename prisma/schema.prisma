// Prisma Schema for BorderlessPay
// This is a reference schema - we're using Drizzle ORM instead

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Business Info
  businessName  String?
  businessType  String?
  firstName     String?
  lastName      String?
  phoneNumber   String?
  
  // Account
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  transactions  Transaction[]
  invoices      Invoice[]
  employees     Employee[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Wallet {
  id              String   @id @default(cuid())
  userId          String
  name            String
  symbol          String   // USDC, USDT, NGN, KES, etc.
  type            String   // stablecoin, local_currency
  balance         Decimal  @default(0)
  address         String   @unique
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([symbol])
  @@index([address])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  type            String   // incoming, outgoing, swap
  status          String   // completed, pending, failed, cancelled
  amount          Decimal
  currency        String
  fromAddress     String?
  toAddress       String?
  networkFee      Decimal?
  note            String?
  hash            String?  @unique
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([hash])
}

model Invoice {
  id              String   @id @default(cuid())
  userId          String
  invoiceNumber   String   @unique
  clientName      String
  description     String
  amount          Decimal
  currency        String   @default("USD")
  status          String   // paid, sent, overdue, draft
  dueDate         DateTime?
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([invoiceNumber])
}

model Employee {
  id              String   @id @default(cuid())
  userId          String   // Business owner
  employeeId      String   @unique
  firstName       String
  lastName        String
  email           String
  position        String
  department      String
  salary          Decimal
  currency        String   @default("USD")
  status          String   @default("active")
  joinedDate      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([employeeId])
  @@index([status])
}

model ExchangeRate {
  id              String   @id @default(cuid())
  fromCurrency    String
  toCurrency      String
  rate            Decimal
  timestamp       DateTime @default(now())
  
  @@unique([fromCurrency, toCurrency, timestamp])
  @@index([fromCurrency, toCurrency])
}
